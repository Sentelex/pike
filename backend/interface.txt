Interface calls/responses outline


Data Defintions
---------------
A "token" is a UUID.

chat_tag:       (chat_token, chat_description)
agent_tag:      (agent_token, agent_description)
user_tag:       (user_token, user_name)
attachment_tag: (attachment_token, attachment_description)

Maps:  Maps token/tag to something, or something to token/tag.

user_map:         Maps (user_name, password) -> user_tag  # Note: Need to secure the mapping of (user_name, password)
attachment_map:   Maps attachment_token to attachment_data
user_chat_map:    Maps user to list of their chat_tokens


In many cases we will pass back tags (token + light_data) instead of raw tokens
from retrieval calls because we generally use tokens as non user-facing IDs and have
an alternate user-facing item to display instead.

Chat_Functions
--------------
GET
*get_agents() -> {array(Agent)}

*get_user_info(user_id) -> {User}
*get_user_agents(user_id) -> {array(Agent)}
*get_user_chats_compact(user_id) -> {array(ChatTag)}
*get_user-chats_by_agent(user_id, agent_id) -> {array(ChatTag)}
*get_user_chat(user_id, chat_id) -> {Chat}
*get_attachment(attachment_token) -> {attachment_data}
*get_agent() -> {Agent}

POST
*create_chat(user_id, agent_id) -> {chat_tag}
*add_agent_to_user(user_id, agent_id) -> {array(Agent)}
*invoke_chat(user_id, chat_id, input) -> lcm.BaseMessage

DELETE
*remove_agent_from_user(user_id, agent_id) -> {array(Agent)}
*remove_chat_from_user(user_id, chat_id) -> {array(ChatTag)}

PUT
*modify_chat_status(chat_token, status_tag_list) -> {status_tag_list}

